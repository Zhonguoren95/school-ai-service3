import pandas as pd
import pdfplumber
import re
from openpyxl import load_workbook
from io import BytesIO
from pdf2image import convert_from_bytes
import pytesseract
from gpt_utils import analyze_position_with_gpt
import streamlit as st

def extract_text_from_pdf(file):
    text = ""
    try:
        with pdfplumber.open(file) as pdf:
            for page in pdf.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text + "\n"
        if not text.strip():
            file.seek(0)
            images = convert_from_bytes(file.read(), dpi=300)
            for img in images:
                text += pytesseract.image_to_string(img, lang="rus") + "\n"
        return text
    except Exception as e:
        return f"[ERROR] PDF parse failed: {e}"

def parse_requirements(text):
    rows = []
    lines = text.split("\n")
    for line in lines:
        if any(char.isdigit() for char in line):
            parts = re.split(r"\s{2,}|\t", line.strip())
            if len(parts) >= 2:
                name = parts[0]
                quantity = re.search(r"\d+", parts[1])
                quantity = quantity.group() if quantity else ""
                rows.append({"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ –¢–ó": name, "–ö–æ–ª-–≤–æ": quantity})
    return pd.DataFrame(rows)

def load_price_list(files):
    all_items = []
    for file in files:
        df = pd.read_excel(file, header=None)
        for index, row in df.iterrows():
            for col in row:
                if isinstance(col, str) and any(x in col.lower() for x in ["—Å—Ç–æ–ª", "–∫—Ä–µ—Å–ª–æ", "–ª–∞–º–ø–∞", "—à–∫–∞—Ñ", "–±–∞–Ω–∫–µ—Ç–∫–∞", "–±–∞—Ä—å–µ—Ä"]):
                    price = next((v for v in row if isinstance(v, (int, float))), "")
                    item = {
                        "–ê—Ä—Ç–∏–∫—É–ª": str(row[0]) if len(row) > 0 else "",
                        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": col,
                        "–¶–µ–Ω–∞": price,
                        "–ü–æ—Å—Ç–∞–≤—â–∏–∫": file.name
                    }
                    all_items.append(item)
                    break
    return pd.DataFrame(all_items)

def load_discounts(file):
    try:
        df = pd.read_excel(file)
        discounts = {}
        for _, row in df.iterrows():
            supplier = row.get("–ü–æ—Å—Ç–∞–≤—â–∏–∫")
            discount = row.get("–°–∫–∏–¥–∫–∞", 0)
            if pd.notna(supplier):
                discounts[supplier] = discount
        return discounts
    except:
        return {}

def process_documents(spec_file, prices_files, discounts_file=None):
    log = []
    try:
        text = extract_text_from_pdf(spec_file)
        if text.startswith("[ERROR]"):
            return text, pd.DataFrame(), None

        log.append("üìÑ –¢–ó —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")
        ts_df = parse_requirements(text)
        log.append(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –≤ –¢–ó: {len(ts_df)}")

        enriched_rows = []
        for i, row in enumerate(ts_df.itertuples(), start=1):
            row_dict = row._asdict()
            try:
                analysis = analyze_position_with_gpt(row_dict["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ –¢–ó"])
                row_dict["GPT_—Ç–∏–ø"] = analysis.get("—Ç–∏–ø", "")
                row_dict["GPT_—Å–∏–Ω–æ–Ω–∏–º—ã"] = ", ".join(analysis.get("—Å–∏–Ω–æ–Ω–∏–º—ã", []))
                row_dict["GPT_–∫–ª—é—á–∏"] = ", ".join(analysis.get("–∫–ª—é—á–∏", []))
            except Exception as e:
                row_dict["GPT_—Ç–∏–ø"] = "–û—à–∏–±–∫–∞"
                row_dict["GPT_—Å–∏–Ω–æ–Ω–∏–º—ã"] = ""
                row_dict["GPT_–∫–ª—é—á–∏"] = row_dict["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ –¢–ó"].split()[0]
                log.append(f"‚ö†Ô∏è GPT –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i}: {e}")
            enriched_rows.append(row_dict)

        enriched_df = pd.DataFrame(enriched_rows)
        log.append("‚úÖ GPT-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω")

        prices_df = load_price_list(prices_files)
        log.append(f"üì¶ –ü—Ä–∞–π—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(prices_df)} —Ç–æ–≤–∞—Ä–æ–≤")
        discounts = load_discounts(discounts_file) if discounts_file else {}

        results = []
        for i, req in enriched_df.iterrows():
            try:
                name = req["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ –¢–ó"]
                qty = req["–ö–æ–ª-–≤–æ"]
                search_keys = req.get("GPT_–∫–ª—é—á–∏", name).split(", ")

                matched = pd.DataFrame()
                for key in search_keys:
                    matches = prices_df[prices_df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"].str.contains(key, case=False, na=False)]
                    matched = pd.concat([matched, matches])
                matched = matched.drop_duplicates().sort_values("–¶–µ–Ω–∞").head(3)

                item = {
                    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ –¢–ó": name,
                    "–ö–æ–ª-–≤–æ": qty
                }

                for j, (_, match) in enumerate(matched.iterrows(), start=1):
                    supplier = match.get("–ü–æ—Å—Ç–∞–≤—â–∏–∫", f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ {j}")
                    price = match.get("–¶–µ–Ω–∞")
                    discount = discounts.get(supplier, 0)
                    final_price = round(price * (1 - discount / 100), 2) if price else ""

                    item[f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ {j}"] = supplier
                    item[f"–¶–µ–Ω–∞ {j}"] = price
                    item[f"–°–∫–∏–¥–∫–∞ {j}"] = f"{discount}%"
                    item[f"–ò—Ç–æ–≥ {j}"] = final_price

                if not matched.empty:
                    results.append(item)
                else:
                    item["–ü–æ—Å—Ç–∞–≤—â–∏–∫ 1"] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                    item["–¶–µ–Ω–∞ 1"] = ""
                    item["–°–∫–∏–¥–∫–∞ 1"] = ""
                    item["–ò—Ç–æ–≥ 1"] = ""
                    results.append(item)
            except Exception as e:
                log.append(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {i + 1}: {e}")

        result_df = pd.DataFrame(results)
        log.append(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(result_df)} —Å—Ç—Ä–æ–∫")

        wb = load_workbook("–§–æ—Ä–º–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.xlsx")
        ws = wb.active
        start_row = 10
        for i, row in result_df.iterrows():
            ws.cell(start_row + i, 1, i + 1)
            ws.cell(start_row + i, 2, row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ –¢–ó"])
            ws.cell(start_row + i, 3, row["–ö–æ–ª-–≤–æ"])
            ws.cell(start_row + i, 4, row.get("–ü–æ—Å—Ç–∞–≤—â–∏–∫ 1", ""))
            ws.cell(start_row + i, 5, row.get("–¶–µ–Ω–∞ 1", ""))
            ws.cell(start_row + i, 6, row.get("–°–∫–∏–¥–∫–∞ 1", ""))
            ws.cell(start_row + i, 7, row.get("–ò—Ç–æ–≥ 1", ""))

        output = BytesIO()
        wb.save(output)
        output.seek(0)

        return "\n".join(log), result_df, output.read()

    except Exception as e:
        return f"[ERROR] Global fail: {e}", pd.DataFrame(), None
